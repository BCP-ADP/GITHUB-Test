'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("EmployeeDetailsDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class EmployeeDetailsDataSet
    Inherits System.Data.DataSet
    
    Private tablevEmployeeDetails As vEmployeeDetailsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vEmployeeDetails")) Is Nothing) Then
                MyBase.Tables.Add(New vEmployeeDetailsDataTable(ds.Tables("vEmployeeDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vEmployeeDetails() As vEmployeeDetailsDataTable
        Get
            Return Me.tablevEmployeeDetails
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As EmployeeDetailsDataSet = CType(MyBase.Clone,EmployeeDetailsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vEmployeeDetails")) Is Nothing) Then
                MyBase.Tables.Add(New vEmployeeDetailsDataTable(ds.Tables("vEmployeeDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevEmployeeDetails = CType(MyBase.Tables("vEmployeeDetails"),vEmployeeDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevEmployeeDetails) Is Nothing) Then
                Me.tablevEmployeeDetails.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "EmployeeDetailsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/EmployeeDetailsDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevEmployeeDetails = New vEmployeeDetailsDataTable
        MyBase.Tables.Add(Me.tablevEmployeeDetails)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevEmployeeDetails() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As EmployeeDetailsDataSet = New EmployeeDetailsDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub vEmployeeDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As vEmployeeDetailsRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vEmployeeDetailsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmployeeID As System.Data.DataColumn
        
        Private columnTitle As System.Data.DataColumn
        
        Private columnFirst_Name As System.Data.DataColumn
        
        Private columnLast_Name As System.Data.DataColumn
        
        Private columnEmail As System.Data.DataColumn
        
        Private columnPhone As System.Data.DataColumn
        
        Private columnDepartment As System.Data.DataColumn
        
        Private columnDepartment_Group As System.Data.DataColumn
        
        Private columnAddressLine1 As System.Data.DataColumn
        
        Private columnCity As System.Data.DataColumn
        
        Private columnPostal_Code As System.Data.DataColumn
        
        Private columnState As System.Data.DataColumn
        
        Private columnCountry As System.Data.DataColumn
        
        Private columnJob_Title As System.Data.DataColumn
        
        Private columnBirth_Date As System.Data.DataColumn
        
        Private columnHire_Date As System.Data.DataColumn
        
        Private columnSick_Leave As System.Data.DataColumn
        
        Private columnShift As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vEmployeeDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnEmployeeID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First_NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnFirst_Name
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Last_NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnLast_Name
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Department_GroupColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartment_Group
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine1Column() As System.Data.DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Postal_CodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnPostal_Code
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Job_TitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnJob_Title
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Birth_DateColumn() As System.Data.DataColumn
            Get
                Return Me.columnBirth_Date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Hire_DateColumn() As System.Data.DataColumn
            Get
                Return Me.columnHire_Date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sick_LeaveColumn() As System.Data.DataColumn
            Get
                Return Me.columnSick_Leave
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShiftColumn() As System.Data.DataColumn
            Get
                Return Me.columnShift
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vEmployeeDetailsRow
            Get
                Return CType(Me.Rows(index),vEmployeeDetailsRow)
            End Get
        End Property
        
        Public Event vEmployeeDetailsRowChanging As vEmployeeDetailsRowChangeEventHandler
        
        Public Event vEmployeeDetailsRowChanged As vEmployeeDetailsRowChangeEventHandler
        
        Public Event vEmployeeDetailsRowDeleting As vEmployeeDetailsRowChangeEventHandler
        
        Public Event vEmployeeDetailsRowDeleted As vEmployeeDetailsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvEmployeeDetailsRow(ByVal row As vEmployeeDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvEmployeeDetailsRow( _
                    ByVal EmployeeID As Integer,  _
                    ByVal Title As String,  _
                    ByVal First_Name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal Email As String,  _
                    ByVal Phone As String,  _
                    ByVal Department As String,  _
                    ByVal Department_Group As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal City As String,  _
                    ByVal Postal_Code As String,  _
                    ByVal State As String,  _
                    ByVal Country As String,  _
                    ByVal Job_Title As String,  _
                    ByVal Birth_Date As Date,  _
                    ByVal Hire_Date As Date,  _
                    ByVal Sick_Leave As Short,  _
                    ByVal Shift As String) As vEmployeeDetailsRow
            Dim rowvEmployeeDetailsRow As vEmployeeDetailsRow = CType(Me.NewRow,vEmployeeDetailsRow)
            rowvEmployeeDetailsRow.ItemArray = New Object() {EmployeeID, Title, First_Name, Last_Name, Email, Phone, Department, Department_Group, AddressLine1, City, Postal_Code, State, Country, Job_Title, Birth_Date, Hire_Date, Sick_Leave, Shift}
            Me.Rows.Add(rowvEmployeeDetailsRow)
            Return rowvEmployeeDetailsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As vEmployeeDetailsRow
            Return CType(Me.Rows.Find(New Object() {EmployeeID}),vEmployeeDetailsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vEmployeeDetailsDataTable = CType(MyBase.Clone,vEmployeeDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vEmployeeDetailsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmployeeID = MyBase.Columns("EmployeeID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnFirst_Name = MyBase.Columns("First Name")
            Me.columnLast_Name = MyBase.Columns("Last Name")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnDepartment_Group = MyBase.Columns("Department Group")
            Me.columnAddressLine1 = MyBase.Columns("AddressLine1")
            Me.columnCity = MyBase.Columns("City")
            Me.columnPostal_Code = MyBase.Columns("Postal Code")
            Me.columnState = MyBase.Columns("State")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnJob_Title = MyBase.Columns("Job Title")
            Me.columnBirth_Date = MyBase.Columns("Birth Date")
            Me.columnHire_Date = MyBase.Columns("Hire Date")
            Me.columnSick_Leave = MyBase.Columns("Sick Leave")
            Me.columnShift = MyBase.Columns("Shift")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmployeeID = New System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeID)
            Me.columnTitle = New System.Data.DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnFirst_Name = New System.Data.DataColumn("First Name", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "First_Name")
            Me.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "First_NameColumn")
            Me.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFirst_Name")
            Me.columnFirst_Name.ExtendedProperties.Add("Generator_UserColumnName", "First Name")
            MyBase.Columns.Add(Me.columnFirst_Name)
            Me.columnLast_Name = New System.Data.DataColumn("Last Name", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Name")
            Me.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_NameColumn")
            Me.columnLast_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Name")
            Me.columnLast_Name.ExtendedProperties.Add("Generator_UserColumnName", "Last Name")
            MyBase.Columns.Add(Me.columnLast_Name)
            Me.columnEmail = New System.Data.DataColumn("Email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnPhone = New System.Data.DataColumn("Phone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnDepartment = New System.Data.DataColumn("Department", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnDepartment_Group = New System.Data.DataColumn("Department Group", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnDepartment_Group.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Department_Group")
            Me.columnDepartment_Group.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Department_GroupColumn")
            Me.columnDepartment_Group.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDepartment_Group")
            Me.columnDepartment_Group.ExtendedProperties.Add("Generator_UserColumnName", "Department Group")
            MyBase.Columns.Add(Me.columnDepartment_Group)
            Me.columnAddressLine1 = New System.Data.DataColumn("AddressLine1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine1)
            Me.columnCity = New System.Data.DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnPostal_Code = New System.Data.DataColumn("Postal Code", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnPostal_Code.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Postal_Code")
            Me.columnPostal_Code.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Postal_CodeColumn")
            Me.columnPostal_Code.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPostal_Code")
            Me.columnPostal_Code.ExtendedProperties.Add("Generator_UserColumnName", "Postal Code")
            MyBase.Columns.Add(Me.columnPostal_Code)
            Me.columnState = New System.Data.DataColumn("State", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnCountry = New System.Data.DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnJob_Title = New System.Data.DataColumn("Job Title", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnJob_Title.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Job_Title")
            Me.columnJob_Title.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Job_TitleColumn")
            Me.columnJob_Title.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnJob_Title")
            Me.columnJob_Title.ExtendedProperties.Add("Generator_UserColumnName", "Job Title")
            MyBase.Columns.Add(Me.columnJob_Title)
            Me.columnBirth_Date = New System.Data.DataColumn("Birth Date", GetType(Date), Nothing, System.Data.MappingType.Element)
            Me.columnBirth_Date.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Birth_Date")
            Me.columnBirth_Date.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Birth_DateColumn")
            Me.columnBirth_Date.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBirth_Date")
            Me.columnBirth_Date.ExtendedProperties.Add("Generator_UserColumnName", "Birth Date")
            MyBase.Columns.Add(Me.columnBirth_Date)
            Me.columnHire_Date = New System.Data.DataColumn("Hire Date", GetType(Date), Nothing, System.Data.MappingType.Element)
            Me.columnHire_Date.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Hire_Date")
            Me.columnHire_Date.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Hire_DateColumn")
            Me.columnHire_Date.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHire_Date")
            Me.columnHire_Date.ExtendedProperties.Add("Generator_UserColumnName", "Hire Date")
            MyBase.Columns.Add(Me.columnHire_Date)
            Me.columnSick_Leave = New System.Data.DataColumn("Sick Leave", GetType(Short), Nothing, System.Data.MappingType.Element)
            Me.columnSick_Leave.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sick_Leave")
            Me.columnSick_Leave.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sick_LeaveColumn")
            Me.columnSick_Leave.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSick_Leave")
            Me.columnSick_Leave.ExtendedProperties.Add("Generator_UserColumnName", "Sick Leave")
            MyBase.Columns.Add(Me.columnSick_Leave)
            Me.columnShift = New System.Data.DataColumn("Shift", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShift)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnEmployeeID}, true))
            Me.columnEmployeeID.AllowDBNull = false
            Me.columnEmployeeID.Unique = true
            Me.columnTitle.MaxLength = 8
            Me.columnFirst_Name.AllowDBNull = false
            Me.columnFirst_Name.MaxLength = 50
            Me.columnLast_Name.AllowDBNull = false
            Me.columnLast_Name.MaxLength = 50
            Me.columnEmail.MaxLength = 50
            Me.columnPhone.MaxLength = 25
            Me.columnDepartment.AllowDBNull = false
            Me.columnDepartment.MaxLength = 50
            Me.columnDepartment_Group.AllowDBNull = false
            Me.columnDepartment_Group.MaxLength = 50
            Me.columnAddressLine1.AllowDBNull = false
            Me.columnAddressLine1.MaxLength = 60
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 30
            Me.columnPostal_Code.AllowDBNull = false
            Me.columnPostal_Code.MaxLength = 15
            Me.columnState.AllowDBNull = false
            Me.columnState.MaxLength = 3
            Me.columnCountry.AllowDBNull = false
            Me.columnCountry.MaxLength = 50
            Me.columnJob_Title.AllowDBNull = false
            Me.columnJob_Title.MaxLength = 50
            Me.columnBirth_Date.AllowDBNull = false
            Me.columnHire_Date.AllowDBNull = false
            Me.columnSick_Leave.AllowDBNull = false
            Me.columnShift.AllowDBNull = false
            Me.columnShift.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvEmployeeDetailsRow() As vEmployeeDetailsRow
            Return CType(Me.NewRow,vEmployeeDetailsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vEmployeeDetailsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vEmployeeDetailsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vEmployeeDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent vEmployeeDetailsRowChanged(Me, New vEmployeeDetailsRowChangeEvent(CType(e.Row,vEmployeeDetailsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vEmployeeDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent vEmployeeDetailsRowChanging(Me, New vEmployeeDetailsRowChangeEvent(CType(e.Row,vEmployeeDetailsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vEmployeeDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent vEmployeeDetailsRowDeleted(Me, New vEmployeeDetailsRowChangeEvent(CType(e.Row,vEmployeeDetailsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vEmployeeDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent vEmployeeDetailsRowDeleting(Me, New vEmployeeDetailsRowChangeEvent(CType(e.Row,vEmployeeDetailsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevEmployeeDetailsRow(ByVal row As vEmployeeDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As EmployeeDetailsDataSet = New EmployeeDetailsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vEmployeeDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vEmployeeDetailsRow
        Inherits System.Data.DataRow
        
        Private tablevEmployeeDetails As vEmployeeDetailsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevEmployeeDetails = CType(Me.Table,vEmployeeDetailsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeID() As Integer
            Get
                Return CType(Me(Me.tablevEmployeeDetails.EmployeeIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.EmployeeIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tablevEmployeeDetails.TitleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Title' in table 'vEmployeeDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevEmployeeDetails.TitleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First_Name() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.First_NameColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.First_NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Last_Name() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Last_NameColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Last_NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablevEmployeeDetails.EmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Email' in table 'vEmployeeDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevEmployeeDetails.EmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Try 
                    Return CType(Me(Me.tablevEmployeeDetails.PhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Phone' in table 'vEmployeeDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevEmployeeDetails.PhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.DepartmentColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.DepartmentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department_Group() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Department_GroupColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Department_GroupColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine1() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.AddressLine1Column),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.AddressLine1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.CityColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.CityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Postal_Code() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Postal_CodeColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Postal_CodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.StateColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.StateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.CountryColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.CountryColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Job_Title() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Job_TitleColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Job_TitleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birth_Date() As Date
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Birth_DateColumn),Date)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Birth_DateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hire_Date() As Date
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Hire_DateColumn),Date)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Hire_DateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sick_Leave() As Short
            Get
                Return CType(Me(Me.tablevEmployeeDetails.Sick_LeaveColumn),Short)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.Sick_LeaveColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Shift() As String
            Get
                Return CType(Me(Me.tablevEmployeeDetails.ShiftColumn),String)
            End Get
            Set
                Me(Me.tablevEmployeeDetails.ShiftColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tablevEmployeeDetails.TitleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tablevEmployeeDetails.TitleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablevEmployeeDetails.EmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablevEmployeeDetails.EmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tablevEmployeeDetails.PhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNull()
            Me(Me.tablevEmployeeDetails.PhoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vEmployeeDetailsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vEmployeeDetailsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vEmployeeDetailsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vEmployeeDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace EmployeeDetailsDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vEmployeeDetailsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vEmployeeDetails"
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("First Name", "First Name")
            tableMapping.ColumnMappings.Add("Last Name", "Last Name")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("Department Group", "Department Group")
            tableMapping.ColumnMappings.Add("AddressLine1", "AddressLine1")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Postal Code", "Postal Code")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("Job Title", "Job Title")
            tableMapping.ColumnMappings.Add("Birth Date", "Birth Date")
            tableMapping.ColumnMappings.Add("Hire Date", "Hire Date")
            tableMapping.ColumnMappings.Add("Sick Leave", "Sick Leave")
            tableMapping.ColumnMappings.Add("Shift", "Shift")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.AWEViewerVB.Settings.Default.AdventureWorksConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EmployeeID, Title, [First Name], [Last Name], Email, Phone, Department, [D"& _ 
                "epartment Group], AddressLine1, City, [Postal Code], State, Country, [Job Title]"& _ 
                ", [Birth Date], [Hire Date], [Sick Leave], Shift FROM dbo.vEmployeeDetails"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As EmployeeDetailsDataSet.vEmployeeDetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As EmployeeDetailsDataSet.vEmployeeDetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As EmployeeDetailsDataSet.vEmployeeDetailsDataTable = New EmployeeDetailsDataSet.vEmployeeDetailsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
